= ActiveRecord JDBC -- Bringing the power of JDBC to Rails

ActiveRecord JDBC is basically an ActiveRecord adapter like all
other, but with the difference that it uses JRuby to work through
JDBC with any database you care to connect to. The ideal situation
is that you can connect to anything you have a JDBC Driver for.
Of course, the situation is not really that simple, since some parts
of databases are usually not totally vendor independent. Because of
this, this adapter provides support for 8 of the more common databases
at the moment. This support include standard ActiveRecord operations
and also migrations, except where support isn't available in the database.

ActiveRecord JDBC is a sub project of jruby-extras at RubyForge.

== Databases -- What's there, and what is not there

* MySQL - Complete support
* PostgreSQL - Complete support
* Oracle - Complete support
* Microsoft SQL Server - Complete support except for change_column_default
* DB2 - Complete, except for the migrations:
  * change_column 
  * change_column_default
  * remove_column
  * rename_column
  * add_index
  * remove_index
  * rename_table
* FireBird - Complete, except for change_column_default and rename_column
* Derby - Complete, except for:
  * change_column
  * change_column_default
  * remove_column
  * rename_column
* HSQLDB - Complete

== Using ActiveRecord JDBC

=== Standalone, with ActiveRecord

Using this adapter is very simple, but requires that you manually add the
adapter. So, to use it in a script, add this to the requires':
  RAILS_CONNECTION_ADAPTERS = ['jdbc']
  require 'active_record'

After this you can establish a JDBC connection like this:

  ActiveRecord::Base.establish_connection(
    :adapter => 'jdbc',
    :driver => 'org.apache.derby.jdbc.EmbeddedDriver',
    :url => 'jdbc:derby:test_ar;create=true'
  )

Provided you have the derby libraries in your classpath, this is enough
to establish an in-memory JDBC connection. The required parameters to
establish_connection for ActiveRecord JDBC are:

* adapter
* driver
* url

If provided, password and username will be used. After the connection is established
Active Record can be used as usual.

=== Inside Rails

Using the adapter inside Rails is slightly more complicated, since we
don't have control over the load process. The easiest way to add
JDBC support is to manually edit your environment.rb, and add this line:

  require "jdbc_adapter"

between

  require File.join(File.dirname(__FILE__), 'boot')

and 

  Rails::Initializer.run do |config|

The head of my environment.rb after these modifications look like this:

  RAILS_GEM_VERSION = '1.1.6'

  # Bootstrap the Rails environment, frameworks, and default configuration
  require File.join(File.dirname(__FILE__), 'boot')

  require "jdbc_adapter"

  Rails::Initializer.run do |config|
    # Settings in config/environments/* take precedence those specified here

== Future developments

There are two interesting roads ahead for the JDBC adapter. First of all,
we want to support more databases, through less effort. There
should be ways to abstract out common behaviour, especially the DDL parts.
This is one of the paths. The other thing that would be nice to support is
the use of data sources for getting connections. This support shouldn't
be hard to build in, but someone got to do it.

== Authors
This project was written by:
Nick Sieger <nick@nicksieger.com>
and
Ola Bini <ola@ologix.com>

with lots of help from the JRuby community.

== License
ActiveRecord-JDBC is released under a BSD license.
